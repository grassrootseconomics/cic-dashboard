# Issuer
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: mohamedsohailazim@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: issuer-account-key
    solvers:
      - http01:
          ingress:
            class: traefik-cert-manager
---
# ArgoCD
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: argocd.PROD_DOMAIN
  namespace: argo
  labels:
    "use-http01-solver": "true"
spec:
  commonName: argocd.PROD_DOMAIN
  secretName: argocd.PROD_DOMAIN.cert
  dnsNames:
    - argocd.PROD_DOMAIN
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: argocd-server
  namespace: argo
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`argocd.PROD_DOMAIN`)
      priority: 10
      services:
        - name: argocd-server
          port: 80
    - kind: Rule
      match: Host(`argocd.PROD_DOMAIN`) && Headers(`Content-Type`, `application/grpc`)
      priority: 11
      services:
        - name: argocd-server
          port: 80
          scheme: h2c
  tls:
    secretName: argocd.PROD_DOMAIN.cert
---
# Workflows
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: workflows.PROD_DOMAIN
  namespace: argo
  labels:
    "use-http01-solver": "true"
spec:
  commonName: workflows.PROD_DOMAIN
  secretName: workflows.PROD_DOMAIN.cert
  dnsNames:
    - workflows.PROD_DOMAIN
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: workflows-server
  namespace: argo
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`workflows.PROD_DOMAIN`)
      services:
        - name: argo-workflows-server
          port: 2746
  tls:
    secretName: workflows.PROD_DOMAIN.cert
---
# Vault
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vault.PROD_DOMAIN
  namespace: grassroots
  labels:
    "use-http01-solver": "true"
spec:
  commonName: vault.PROD_DOMAIN
  secretName: vault.PROD_DOMAIN.cert
  dnsNames:
    - vault.PROD_DOMAIN
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: vault-server
  namespace: grassroots
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`vault.PROD_DOMAIN`)
      kind: Rule
      services:
        - name: vault
          port: 8200
  tls:
    secretName: vault.PROD_DOMAIN.cert
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth
  namespace: grassroots
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
  namespace: grassroots
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault-auth
    namespace: grassroots
# External Secrets
apiVersion: external-secrets.io/v1alpha1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: grassroots
spec:
  provider:
    vault:
      server: "http://vault:8200"
      path: "kv"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "apps"
          serviceAccountRef:
            name: "vault-auth"
            namespace: grassroots
# Argo Workflows Authorization
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-invocation
  namespace: argo
rules:
- apiGroups:
  - "argoproj.io"
  resources:
  - "workflows"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-default-invocation
  namespace: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-invocation
subjects:
- kind: ServiceAccount
  name: default
  namespace: default


# give workflows (as argo:default) permissions to run things
# see https://github.com/argoproj/argo/blob/master/docs/workflow-rbac.md
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-workflow
  namespace: argo
rules:
# pod get/watch is used to identify the container IDs of the current pod
# pod patch is used to annotate the step's outputs back to controller (e.g. artifact location)
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - patch
# logs get/watch are used to get the pods logs for script outputs, and for log archival
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-default-workflow
  namespace: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-workflow
subjects:
- kind: ServiceAccount
  name: default
  namespace: argo